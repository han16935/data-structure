코드의 성능을 어떻게 비교할 수 있을까?
   성능이 좋다의 의미는 무엇인가?
       1. 실행 속도가 빠른가?
                 1. 내장되어 있는 함수를 사용해보자
                         JS 기준 performance.now() 사용
       
                       ex) function addupTo(n){ ~~~}
                             let t1 = performance.now() //이 창을 열을 때 걸린 시간
                             addupTo(100);
                             let t2 = performance.now()/// 함수를 실행시킨 시간 + t1
                             console.log(t2-t1)//함수가 실행되는 데 걸린 시간

                        단점) 기기마다 다른 방식으로 시간을 측정할 수 있음
                                같은 기기도 다른 시간을 보여줌
                                실행 속도가 빠른 알고리즘은 실행 시간을 측정하기 어려움

                       => 실제 코드를 실행하기보다는 보다 확실하게 코드의 실행 속도를 비교하고 싶다!
                       => 그렇다면, 코드의 연산 갯수를 비교하는 것은 어떨까?

                2. 실행되는 연산자 갯수 비교(big - 0)
                        ex1) //전부 더하면 3
                           function addupTo(n){
                              return n * (n+1) /2} // 연산자 3개 존재(*, +, /)
         
                        ex2) //전부 더하면 5n+2
                           function addUpTo(n){
                               let total = 0; // total = 0 1번
                               for (let i=1; i<=n;i++) //i=1 1번, i<=n n번, i++ 2n번
                                 total+=i; //total = total + i 2n번
                               return total;} 
  
                        단순히 3, 5n+2로 보는 것이 아닌, 전반적인 추세를 봐야! 
                             - 위 두 함수의 실행 속도를 비교해보면, 
                                ex1이 훨씬 빠르다는 것을 알 수 있음.

                            - 3, 5n+2 전부 입력값이 커지면 1, n과 차이가 미미해지므로
                              big - 0 표기법에서는 각각 1, n으로 표기함

                             

                         Big - 0
                             - 입력의 크기와 실행 시간의 관계
                             - 입력값이 커질수록 실행 시간도 늘어남

                             ex) 위의 ex1을 예로 들면, 입력되는 값이 계속 커져도,
                                   실행되는 연산자의 개수는 일정함
                                    이런 경우는 O(1)로 표시함
               
                             ex) ex2를 예로 들면, 함수 안 반복문이 n번 반복되므로
                                  O(n)으로 표기
                             

          
       2. 더 적은 메모리를 사용하는가?
              공간 복잡도, O(n)으로 표현
                 1. primitives are constant(입력 크기와 상관없음)
                 2. string require O(n) Space
                 3. reference types are generally O(n)
                    // 배열의 크기, 객체의 키 개수
                    // 즉, 배열과 객체가 있으면 O(n)으로 표기
                    

                cf> 입력은 공간 복잡도에 영향을 미치지 않음
          
                ex)function sum(arr){
                        let total = 0;
                        for(let i=0;i<arr.length; i++)
                             total +=arr[i]
                        return total
                        
                   //위 함수는 배열을 입력받고, 내부에는 배열, 객체 등이 없으므로
                      O(1)

              
                ex2) function double(arr){
                          let newArr = []
                          for (let i=0;i<arr.length;i++)
                                newArr.push(arr[i])
                          return newArr

                   //위 함수는 내부에 newArr 배열을 선언하고, 
                      입력되는 배열 요소의 개수에 따라서 newArr의 개수가 달라지므로
                       O(n)이다.
 
                    
          







    

     
    